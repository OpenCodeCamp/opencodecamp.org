// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenCodeCamp.Services.Marketing.Infrastructure;

namespace OpenCodeCamp.Services.Marketing.Infrastructure.Migrations
{
    [DbContext(typeof(MarketingContext))]
    [Migration("20200108074330_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:marketing.newslettersubscriptionseq", "'newslettersubscriptionseq', 'marketing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:marketing.newslettersubscriptiontokenseq", "'newslettersubscriptiontokenseq', 'marketing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "newslettersubscriptionseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "marketing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("cancelled")
                        .HasColumnName("Cancelled")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("confirmed")
                        .HasColumnName("Confirmed")
                        .HasMaxLength(25);

                    b.Property<DateTime>("inserted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Inserted")
                        .HasMaxLength(25)
                        .HasDefaultValue(new DateTime(2020, 1, 8, 8, 43, 30, 562, DateTimeKind.Local).AddTicks(5775));

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnName("Language")
                        .HasMaxLength(5);

                    b.Property<DateTime>("lastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastUpdated")
                        .HasMaxLength(25)
                        .HasDefaultValue(new DateTime(2020, 1, 8, 8, 43, 30, 573, DateTimeKind.Local).AddTicks(1253));

                    b.Property<int>("statusId")
                        .HasColumnName("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("statusId");

                    b.ToTable("newslettersubscriptions","marketing");
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("newslettersubscriptionstatus","marketing");
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "newslettersubscriptiontokenseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "marketing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("Inserted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2020, 1, 8, 8, 43, 30, 599, DateTimeKind.Local).AddTicks(7754));

                    b.Property<int>("NewsletterSubscriptionId");

                    b.Property<string>("_token")
                        .IsRequired()
                        .HasColumnName("Token")
                        .HasMaxLength(32);

                    b.Property<int>("_tokenTypeId")
                        .HasColumnName("TokenTypeId");

                    b.Property<DateTime?>("_used")
                        .HasColumnName("Used")
                        .HasMaxLength(25);

                    b.Property<DateTime>("expiration")
                        .HasColumnName("Expiration")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("NewsletterSubscriptionId");

                    b.HasIndex("_tokenTypeId");

                    b.ToTable("newslettersubscriptiontokens","marketing");
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionTokenType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("newslettersubscriptiontokentypes","marketing");
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("requests","marketing");
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscription", b =>
                {
                    b.HasOne("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionToken", b =>
                {
                    b.HasOne("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscription", null)
                        .WithMany("Tokens")
                        .HasForeignKey("NewsletterSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCodeCamp.Services.Marketing.Domain.AggregatesModel.NewsletterSubscriptionAggregate.NewsletterSubscriptionTokenType", "TokenType")
                        .WithMany()
                        .HasForeignKey("_tokenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
